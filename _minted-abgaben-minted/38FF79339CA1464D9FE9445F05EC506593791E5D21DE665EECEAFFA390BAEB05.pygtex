\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+cm}{\PYGZob{}\PYGZhy{}\PYGZsh{} OPTIONS\PYGZus{}GHC \PYGZhy{}Wno\PYGZhy{}unrecognised\PYGZhy{}pragmas \PYGZsh{}\PYGZhy{}\PYGZcb{}}
\PYG{c+cm}{\PYGZob{}\PYGZhy{}\PYGZsh{} HLINT ignore \PYGZdq{}Use camelCase\PYGZdq{} \PYGZsh{}\PYGZhy{}\PYGZcb{}}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Die Datentyp BtreeFloat besteht aus einem leerem Knoten Nil oder ein Knoten Node mit einer Gleitkommazahl (Float) als Wert und einem linken Kind (einem Bin¨arbaum) und einem rechten Kind (einem Bin¨arbaum).}
\PYG{k+kr}{data} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{=} \PYG{k+kt}{Nil} \PYG{o}{|} \PYG{k+kt}{Node} \PYG{k+kt}{Float} \PYG{k+kt}{BtreeFloat} \PYG{k+kt}{BtreeFloat}
  \PYG{k+kr}{deriving} \PYG{p}{(}\PYG{k+kt}{Eq}\PYG{p}{,} \PYG{k+kt}{Show}\PYG{p}{,} \PYG{k+kt}{Ord}\PYG{p}{)}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Die Funktion fügt eine Gleitkommazahl in den Binärbaum ein. Diese Funktion fugt eine Gleitkommazahl in den Bin ¨ ¨arbaum ein. Fur jeden Knoten wird der Wert s mit dem Wert des aktuellen Knoten s\PYGZca{}i verglichen. Ist s \PYGZlt{} s\PYGZca{}i dann wird der Wert in den linken Bin¨arbaum eingefugt, ist s \PYGZgt{} s\PYGZca{}i dann wird der Wert in den rechten Binärbaum eingefugt. Sind beide Werte gleich wird der Wert nicht eingefügt. Der Wert s wird soweit nach unten durchgereicht bis ein Blatt erreicht wird. Dort wird dann ein neuer Knoten mit dem Wert s und zwei leeren Kindern (Binäarbäumen) eingefügt}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{}Beispiel insert tree 2 sollte Node 1.0 (Node 2.0 (Node 3.0 (Node 4.0 Nil Nil) (Node 5.0 (Node 6.0 Nil Nil) Nil)) Nil) (Node 7.0 (Node 2.0 Nil Nil) Nil) ausgeben.}
\PYG{n+nf}{insert} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{Float} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{BtreeFloat}
\PYG{n+nf}{insert} \PYG{k+kt}{Nil} \PYG{n}{flt} \PYG{o+ow}{=} \PYG{k+kt}{Node} \PYG{n}{flt} \PYG{k+kt}{Nil} \PYG{k+kt}{Nil}
\PYG{n+nf}{insert} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{val} \PYG{n}{left} \PYG{n}{right}\PYG{p}{)} \PYG{n}{flt}
  \PYG{o}{|}\PYG{n}{flt} \PYG{o}{\PYGZlt{}} \PYG{n}{val} \PYG{o+ow}{=} \PYG{k+kt}{Node} \PYG{n}{val} \PYG{p}{(}\PYG{n}{insert} \PYG{n}{left} \PYG{n}{flt}\PYG{p}{)}  \PYG{n}{right}
  \PYG{o}{|}\PYG{n}{otherwise} \PYG{o+ow}{=} \PYG{k+kt}{Node} \PYG{n}{val} \PYG{n}{left} \PYG{p}{(}\PYG{n}{insert} \PYG{n}{right} \PYG{n}{flt}\PYG{p}{)}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Die Funktion gibt die Tiefe des Binärbaumes an. Die Tiefe ist dabei der maximal Längste Pfad von der Wurzel bis zu einem Blatt.}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Beispiel depth tree sollte 5 ausgeben}
\PYG{n+nf}{depth} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{Int}
\PYG{n+nf}{depth} \PYG{k+kt}{Nil} \PYG{o+ow}{=} \PYG{l+m+mi}{0}
\PYG{n+nf}{depth} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{val} \PYG{n}{left} \PYG{n}{right}\PYG{p}{)}
  \PYG{o}{|}\PYG{n}{depth} \PYG{n}{left} \PYG{o}{\PYGZgt{}} \PYG{n}{depth} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{depth} \PYG{n}{left}
  \PYG{o}{|}\PYG{n}{depth} \PYG{n}{left} \PYG{o}{\PYGZlt{}} \PYG{n}{depth} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{depth} \PYG{n}{right}
  \PYG{o}{|}\PYG{n}{depth} \PYG{n}{left} \PYG{o}{==} \PYG{n}{depth} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{depth} \PYG{n}{right}
  \PYG{o}{|}\PYG{n}{otherwise} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{depth} \PYG{n}{right}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Die Funktion gibt den größten Knotenwert innerhalb eines Binärbaumes zurück, im falle eines leeren Knoten ist die Ausgabe 0.}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Beispiel max\PYGZus{}node tree ist 7.0}
\PYG{n+nf}{max\PYGZus{}node} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{Float}
\PYG{n+nf}{max\PYGZus{}node} \PYG{k+kt}{Nil} \PYG{o+ow}{=} \PYG{l+m+mi}{0}
\PYG{n+nf}{max\PYGZus{}node} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{val} \PYG{k+kt}{Nil} \PYG{k+kt}{Nil}\PYG{p}{)} \PYG{o+ow}{=} \PYG{n}{val}
\PYG{n+nf}{max\PYGZus{}node} \PYG{p}{(}\PYG{k+kt}{Node}  \PYG{n}{val}  \PYG{n}{left} \PYG{n}{right}\PYG{p}{)} \PYG{o+ow}{=} \PYG{n}{max\PYGZus{}node} \PYG{n}{right}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Die Funktion gibt die Differenz zwischen dem kürzesten und dem längsten Pfad im Binärbaum zurück. Ein Pfad sei dabei die Anzahl der Knoten vom WUrzelknoten (dem Startknoten) zu einem Blattknoten.}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Beispiel path\PYGZus{}diff tree sollte 2 ausgeben}
\PYG{n+nf}{path\PYGZus{}diff} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{Int}
\PYG{n+nf}{path\PYGZus{}diff} \PYG{k+kt}{Nil} \PYG{o+ow}{=} \PYG{n}{depth} \PYG{k+kt}{Nil} \PYG{o}{\PYGZhy{}} \PYG{n}{shortest\PYGZus{}path} \PYG{k+kt}{Nil}
\PYG{n+nf}{path\PYGZus{}diff} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{left} \PYG{n}{val} \PYG{n}{right}\PYG{p}{)} \PYG{o+ow}{=} \PYG{n}{depth} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{left} \PYG{n}{val} \PYG{n}{right}\PYG{p}{)} \PYG{o}{\PYGZhy{}} \PYG{n}{shortest\PYGZus{}path} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{left} \PYG{n}{val} \PYG{n}{right}\PYG{p}{)}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Hilfsfunktion um die Funktion path\PYGZus{}diff implementieren zu können}
\PYG{n+nf}{shortest\PYGZus{}path} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat} \PYG{o+ow}{\PYGZhy{}\PYGZgt{}} \PYG{k+kt}{Int}
\PYG{n+nf}{shortest\PYGZus{}path} \PYG{k+kt}{Nil} \PYG{o+ow}{=} \PYG{l+m+mi}{1}
\PYG{n+nf}{shortest\PYGZus{}path} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{n}{val} \PYG{n}{left} \PYG{n}{right}\PYG{p}{)}
  \PYG{o}{|}\PYG{n}{shortest\PYGZus{}path} \PYG{n}{left} \PYG{o}{\PYGZgt{}} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{right}
  \PYG{o}{|}\PYG{n}{shortest\PYGZus{}path} \PYG{n}{left} \PYG{o}{\PYGZlt{}} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{left}
  \PYG{o}{|}\PYG{n}{shortest\PYGZus{}path} \PYG{n}{left} \PYG{o}{==} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{right} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{left}
  \PYG{o}{|}\PYG{n}{otherwise} \PYG{o+ow}{=} \PYG{l+m+mi}{1} \PYG{o}{+} \PYG{n}{shortest\PYGZus{}path} \PYG{n}{left}
\PYG{c+c1}{\PYGZhy{}\PYGZhy{} Konstruktor für einen Binärbaum BtreeFloat}
\PYG{n+nf}{tree} \PYG{o+ow}{::} \PYG{k+kt}{BtreeFloat}
\PYG{n+nf}{tree} \PYG{o+ow}{=} \PYG{k+kt}{Node} \PYG{l+m+mi}{1} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{2} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{3} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{4} \PYG{k+kt}{Nil} \PYG{k+kt}{Nil}\PYG{p}{)} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{5} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{6} \PYG{k+kt}{Nil} \PYG{k+kt}{Nil}\PYG{p}{)} \PYG{k+kt}{Nil}\PYG{p}{))} \PYG{k+kt}{Nil}\PYG{p}{)} \PYG{p}{(}\PYG{k+kt}{Node} \PYG{l+m+mi}{7} \PYG{k+kt}{Nil} \PYG{k+kt}{Nil}\PYG{p}{)}
\end{Verbatim}
